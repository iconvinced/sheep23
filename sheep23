#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import sys
from scapy.all import *

Ether.tcpFlowId = lambda self:\
    "{}:{}_{}:{}".format(self[IP].src, self[TCP].sport, self[IP].dst, self[TCP].dport) if (IP in self and TCP in self) else ""

Sheeps = None

class Sheep:
    callback = None

    def __init__(self, id):
        self.id = id
        self.buffer = bytearray()
        self.username = self.password = ""
        self.state = "init"

    def push(self, buf):
        if buf[0] == 0xff: # telnet protocol-used packets
            self.state = "connected"
            return

        if self.state not in ["connected", "username-got"]:
            return

        for bit in buf:
            if bit == 0x08: # backspace
                if len(self.buffer) > 0:
                    self.buffer.pop()
            elif bit == 0x0D: # enter
                if self.state == "connected":
                    if len(self.buffer) > 0:
                        self.username = self.buffer.decode('ascii')
                        self.state = "username-got"
                        self.buffer = bytearray()
                elif self.state == "username-got":
                    if len(self.buffer) > 0:
                        self.password = self.buffer.decode('ascii')
                    if self.callback:
                        self.callback(self.username, self.password)
                    self.state = "password-got"
            else:
                self.buffer.append(bit)

class Sheeps:
    collection = {}

    def find(self, id):
        if id not in self.collection.keys():
            self.collection[id] = Sheep(id)
        return self.collection[id]

def callback(username, password):
    shadow_since = 2
    print("Username: " + username)
    print("Password: " + password[:shadow_since] + '*'*(len(password) - shadow_since))

def filter_telnet_client(handler):
    def _(pkt):
        if (TCP in pkt) and (pkt[TCP].dport == 23) and (Raw in pkt):
            return handler(pkt)
    return _

@filter_telnet_client
def handler(pkt):
    sheep = Sheeps.find(pkt.tcpFlowId())
    sheep.callback = callback
    sheep.push(pkt[Raw].load)

if __name__ == '__main__':
    iface = sys.argv[1] if len(sys.argv) > 1 else None
    Sheeps = Sheeps()
    sniff(iface=iface, prn=handler)
